from aiogram import types
from aiogram.dispatcher.filters import Command
from datetime import datetime
from sqlalchemy.orm import Session
from ..core.database import get_db
from ..services.schedule import ScheduleService
from .bot import dp

@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                web_app=types.WebAppInfo(url="https://raspisanie.space")
            )
        ]])
    )

@dp.message_handler(Command("groups"))
async def cmd_groups(message: types.Message):
    db = next(get_db())
    groups = ScheduleService.get_all_groups(db)
    groups_text = "\n".join([f"‚Ä¢ –ì—Ä—É–ø–ø–∞ {g.name} (ID: {g.id})" for g in groups])
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n\n"
        f"{groups_text}"
    )

@dp.message_handler(Command("schedule"))
async def cmd_schedule(message: types.Message):
    try:
        cmd_parts = message.text.split()
        if len(cmd_parts) != 2:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: /schedule 1"
            )
            return
        
        group_id = int(cmd_parts[1])
        today = datetime.now().strftime("%Y-%m-%d")
        
        db = next(get_db())
        schedule = ScheduleService.get_schedule_by_date(db, group_id, today)
        if not schedule:
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        lessons = schedule.get('lessons', [])
        if not lessons:
            await message.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç")
            return
            
        lessons_text = "\n\n".join([
            f"üïí {lesson['time']}\n"
            f"üìö {lesson['subject']}\n"
            f"üë®‚Äçüè´ {lesson['teacher']}\n"
            f"üèõ {lesson['classroom']}"
            for lesson in lessons
        ])
            
        await message.answer(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today}:\n\n"
            f"{lessons_text}"
        )
            
    except ValueError:
        await message.answer("ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
